using System;
using System.Linq;
using System.Linq.Expressions;
using System.IO;
using System.Collections.Generic;
using System.Diagnostics;
using System.Dynamic;
using System.Text;
using System.Threading.Tasks;
using TextTemplating;
using TextTemplating.Infrastructure;
using TextTemplating.T4.Parsing;
using TextTemplating.T4.Preprocessing;
using System.Collections;
using Humanizer.Bytes;
using YandexCloud.Examples.CloudFunctions.Info;

namespace YandexCloud.Examples.CloudFunctions.Info
{
    public partial class View : TextTransformationBase
    {
        public override string TransformText()
        {
            Write("<html lang=\"\">");
            WriteLine();
            Write("<head>");
            WriteLine();
            Write("    <title>Function VM Information</title>");
            WriteLine();
            Write("    <style>");
            WriteLine();
            WriteLine();
            Write("        p {");
            WriteLine();
            Write("            color: rgba(48, 69, 92, 0.8);");
            WriteLine();
            Write("            position: relative;");
            WriteLine();
            Write("            overflow: hidden;");
            WriteLine();
            Write("            max-height: 800px;");
            WriteLine();
            Write("            opacity: 1;");
            WriteLine();
            Write("            transform: translate(0, 0);");
            WriteLine();
            Write("            margin-top: 14px;");
            WriteLine();
            Write("            z-index: 2;");
            WriteLine();
            Write("        }");
            WriteLine();
            WriteLine();
            Write("        pre {");
            WriteLine();
            Write("            color: rgba(48, 69, 92, 0.8);");
            WriteLine();
            Write("            position: relative;");
            WriteLine();
            Write("            overflow: hidden;");
            WriteLine();
            Write("            max-height: 800px;");
            WriteLine();
            Write("            opacity: 1;");
            WriteLine();
            Write("            transform: translate(0, 0);");
            WriteLine();
            Write("            margin-top: 14px;");
            WriteLine();
            Write("            z-index: 2;");
            WriteLine();
            Write("        }");
            WriteLine();
            WriteLine();
            Write("        ul {");
            WriteLine();
            Write("            list-style: none;");
            WriteLine();
            Write("            perspective: 900;");
            WriteLine();
            Write("            padding: 0;");
            WriteLine();
            Write("            margin: 0;");
            WriteLine();
            Write("        }");
            WriteLine();
            Write("        ul li {");
            WriteLine();
            Write("            position: relative;");
            WriteLine();
            Write("            padding: 0;");
            WriteLine();
            Write("            margin: 0;");
            WriteLine();
            Write("            border-top: 1px dotted #dce7eb;");
            WriteLine();
            Write("        }");
            WriteLine();
            Write("        ul li:nth-of-type(1) {");
            WriteLine();
            Write("            animation-delay: 0.5s;");
            WriteLine();
            Write("        }");
            WriteLine();
            Write("        ul li:nth-of-type(2) {");
            WriteLine();
            Write("            animation-delay: 0.75s;");
            WriteLine();
            Write("        }");
            WriteLine();
            Write("        ul li:nth-of-type(3) {");
            WriteLine();
            Write("            animation-delay: 1s;");
            WriteLine();
            Write("        }");
            WriteLine();
            Write("        ul li:last-of-type {");
            WriteLine();
            Write("            padding-bottom: 0;");
            WriteLine();
            Write("        }");
            WriteLine();
            Write("        ul li i {");
            WriteLine();
            Write("            position: absolute;");
            WriteLine();
            Write("            transform: translate(-6px, 0);");
            WriteLine();
            Write("            margin-top: 16px;");
            WriteLine();
            Write("            right: 0;");
            WriteLine();
            Write("        }");
            WriteLine();
            Write("        ul li i:before, ul li i:after {");
            WriteLine();
            Write("            content: \"\";");
            WriteLine();
            Write("            position: absolute;");
            WriteLine();
            Write("            background-color: black;");
            WriteLine();
            Write("            width: 3px;");
            WriteLine();
            Write("            height: 9px;");
            WriteLine();
            Write("        }");
            WriteLine();
            Write("        ul li i:before {");
            WriteLine();
            Write("            transform: translate(-2px, 0) rotate(45deg);");
            WriteLine();
            Write("        }");
            WriteLine();
            Write("        ul li i:after {");
            WriteLine();
            Write("            transform: translate(2px, 0) rotate(-45deg);");
            WriteLine();
            Write("        }");
            WriteLine();
            Write("        ul li input[type=checkbox] {");
            WriteLine();
            Write("            position: absolute;");
            WriteLine();
            Write("            cursor: pointer;");
            WriteLine();
            Write("            width: 100%;");
            WriteLine();
            Write("            height: 100%;");
            WriteLine();
            Write("            z-index: 1;");
            WriteLine();
            Write("            opacity: 0;");
            WriteLine();
            Write("        }");
            WriteLine();
            Write("        ul li input[type=checkbox]:checked ~ p {");
            WriteLine();
            Write("            margin-top: 0;");
            WriteLine();
            Write("            max-height: 0;");
            WriteLine();
            Write("            opacity: 0;");
            WriteLine();
            Write("            transform: translate(0, 50%);");
            WriteLine();
            Write("        }");
            WriteLine();
            Write("        ul li input[type=checkbox]:checked ~ pre {");
            WriteLine();
            Write("            margin-top: 0;");
            WriteLine();
            Write("            max-height: 0;");
            WriteLine();
            Write("            opacity: 0;");
            WriteLine();
            Write("            transform: translate(0, 50%);");
            WriteLine();
            Write("        }");
            WriteLine();
            Write("        ul li input[type=checkbox]:checked ~ i:before {");
            WriteLine();
            Write("            transform: translate(2px, 0) rotate(45deg);");
            WriteLine();
            Write("        }");
            WriteLine();
            Write("        ul li input[type=checkbox]:checked ~ i:after {");
            WriteLine();
            Write("            transform: translate(-2px, 0) rotate(-45deg);");
            WriteLine();
            Write("        }");
            WriteLine();
            WriteLine();
            Write("        p span.value::after {");
            WriteLine();
            Write("            content: \"\\A\";");
            WriteLine();
            Write("            white-space: pre;");
            WriteLine();
            Write("        }");
            WriteLine();
            WriteLine();
            Write("        p span.value{");
            WriteLine();
            Write("            color: black;");
            WriteLine();
            Write("        }");
            WriteLine();
            WriteLine();
            WriteLine();
            Write("        @keyframes flipdown {");
            WriteLine();
            Write("            0% {");
            WriteLine();
            Write("                opacity: 0;");
            WriteLine();
            Write("                transform-origin: top center;");
            WriteLine();
            Write("                transform: rotateX(-90deg);");
            WriteLine();
            Write("            }");
            WriteLine();
            Write("            5% {");
            WriteLine();
            Write("                opacity: 1;");
            WriteLine();
            Write("            }");
            WriteLine();
            Write("            80% {");
            WriteLine();
            Write("                transform: rotateX(8deg);");
            WriteLine();
            Write("            }");
            WriteLine();
            Write("            83% {");
            WriteLine();
            Write("                transform: rotateX(6deg);");
            WriteLine();
            Write("            }");
            WriteLine();
            Write("            92% {");
            WriteLine();
            Write("                transform: rotateX(-3deg);");
            WriteLine();
            Write("            }");
            WriteLine();
            Write("            100% {");
            WriteLine();
            Write("                transform-origin: top center;");
            WriteLine();
            Write("                transform: rotateX(0deg);");
            WriteLine();
            Write("            }");
            WriteLine();
            Write("        }");
            WriteLine();
            Write("    </style>");
            WriteLine();
            Write("</head>");
            WriteLine();
            Write("<body>");
            WriteLine();
            Write("    <h1>Function VM Information</h1>");
            WriteLine();
            Write("    <ul>");
            WriteLine();
            Write("        <li>");
            WriteLine();
            Write("            <input type=\"checkbox\" checked />");
            WriteLine();
            Write("            <i></i>");
            WriteLine();
            Write("            <h3>Request</h3>");
            WriteLine();
            Write("            <pre>");
            Write((Request).ToString()); Write(" </pre>");
            WriteLine();
            Write("            </li>");
            WriteLine();
            Write("        <li>");
            WriteLine();
            Write("            <input type=\"checkbox\" checked />");
            WriteLine();
            Write("            <i></i>");
            WriteLine();
            Write("            <h3>Environment variables</h3>");
            WriteLine();
            Write("            <p>");
            WriteLine();

            foreach (DictionaryEntry entry in Environment.GetEnvironmentVariables())
            {
                WriteLine();
                Write("            <span class=\"name\">");
                Write((entry.Key).ToString()); Write(" = </span><span class=\"value\">");
                Write((entry.Value?.ToString() ?? "(null)").ToString()); Write("</span>");
                WriteLine();
            }
            WriteLine();
            Write("            </p>");
            WriteLine();
            Write("        </li>");
            WriteLine();
            WriteLine();
            Write("        <li>");
            WriteLine();
            Write("            <input type=\"checkbox\" checked />");
            WriteLine();
            Write("            <i></i>");
            WriteLine();
            Write("            <h3>.NET Runtime</h3>");
            WriteLine();
            Write("            <p>");
            WriteLine();
            Write("                <span class=\"name\">JitInfo: </span><span class=\"value\">");
            Write((EnvInfo.JitInfo).ToString()); Write("</span>");
            WriteLine();
            Write("                <span class=\"name\">Architecture: </span><span class=\"value\">");
            Write((EnvInfo.Architecture).ToString()); Write("</span>");
            WriteLine();
            Write("                <span class=\"name\">Configuration: </span><span class=\"value\">");
            Write((EnvInfo.Configuration).ToString()); Write("</span>");
            WriteLine();
            Write("                <span class=\"name\">InDocker: </span><span class=\"value\">");
            Write((EnvInfo.InDocker).ToString()); Write("</span>");
            WriteLine();
            Write("                <span class=\"name\">RuntimeVersion: </span><span class=\"value\">");
            Write((EnvInfo.RuntimeVersion).ToString()); Write("</span>");
            WriteLine();
            Write("                <span class=\"name\">HardwareIntrinsicsShort: </span><span class=\"value\">");
            Write((EnvInfo.HardwareIntrinsicsShort).ToString()); Write("</span>");
            WriteLine();
            Write("                <span class=\"name\">HasRyuJit: </span><span class=\"value\">");
            Write((EnvInfo.HasRyuJit).ToString()); Write("</span>");
            WriteLine();
            Write("                <span class=\"name\">IsConcurrentGC: </span><span class=\"value\">");
            Write((EnvInfo.IsConcurrentGC).ToString()); Write("</span>");
            WriteLine();
            Write("                <span class=\"name\">IsServerGC: </span><span class=\"value\">");
            Write((EnvInfo.IsServerGC).ToString()); Write("</span>");
            WriteLine();
            Write("            </p>");
            WriteLine();
            Write("        </li>");
            WriteLine();
            WriteLine();
            Write("        <li>");
            WriteLine();
            Write("            <input type=\"checkbox\" checked />");
            WriteLine();
            Write("            <i></i>");
            WriteLine();
            Write("            <h3>Environment class</h3>");
            WriteLine();
            Write("            <p>");
            WriteLine();

            foreach (var (name, value) in GetEnvironmentProperties())
            {
                WriteLine();
                Write("            <span class=\"name\">");
                Write((name).ToString()); Write(" = </span><span class=\"value\">");
                Write((value).ToString()); Write("</span>");
                WriteLine();
            }
            WriteLine();
            Write("            </p>");
            WriteLine();
            Write("        </li>");
            WriteLine();
            WriteLine();
            Write("        <li>");
            WriteLine();
            Write("            <input type=\"checkbox\" checked />");
            WriteLine();
            Write("            <i></i>");
            WriteLine();
            Write("            <h3>Memory</h3>");
            WriteLine();
            Write("            <p>");
            WriteLine();
            Write("                <span class=\"name\">Available physical: </span><span class=\"value\">");
            Write((ByteSize.FromBytes(HardwareInfo.MemoryStatus.AvailablePhysical)).ToString()); Write("</span>");
            WriteLine();
            Write("                <span class=\"name\">Available virtual: </span><span class=\"value\">");
            Write((ByteSize.FromBytes(HardwareInfo.MemoryStatus.AvailableVirtual)).ToString()); Write("</span>");
            WriteLine();
            Write("                <span class=\"name\">Total physical: </span><span class=\"value\">");
            Write((ByteSize.FromBytes(HardwareInfo.MemoryStatus.TotalPhysical)).ToString()); Write("</span>");
            WriteLine();
            Write("                <span class=\"name\">Total virtual: </span><span class=\"value\">");
            Write((ByteSize.FromBytes(HardwareInfo.MemoryStatus.TotalVirtual)).ToString()); Write("</span>");
            WriteLine();
            Write("                <span class=\"name\">Available extended virtual: </span><span class=\"value\">");
            Write((ByteSize.FromBytes(HardwareInfo.MemoryStatus.AvailableExtendedVirtual)).ToString()); Write("</span>");
            WriteLine();
            Write("                <span class=\"name\">Available page file: </span><span class=\"value\">");
            Write((ByteSize.FromBytes(HardwareInfo.MemoryStatus.AvailablePageFile)).ToString()); Write("</span>");
            WriteLine();
            Write("                <span class=\"name\">Total page file: </span><span class=\"value\">");
            Write((ByteSize.FromBytes(HardwareInfo.MemoryStatus.TotalPageFile)).ToString()); Write("</span>");
            WriteLine();
            Write("                <br />");
            WriteLine();
            Write("                ");

            if (HardwareInfo.MemoryList.Any())
            {
                WriteLine();
                Write("<span class=\"name\">Memory banks:</span><span class=\"value\"> </span>");
                WriteLine();

                foreach (var ml in HardwareInfo.MemoryList)
                {
                    WriteLine();
                    Write("                <span class=\"value\">");
                    Write((ml.ToString()).ToString()); Write(" </span>");
                    WriteLine();
                    Write("                ");

                }
            }
            WriteLine();
            Write("            </p>");
            WriteLine();
            Write("        </li>");
            WriteLine();
            WriteLine();
            Write("        <li>");
            WriteLine();
            Write("            <input type=\"checkbox\" checked />");
            WriteLine();
            Write("            <i></i>");
            WriteLine();
            Write("            <h3>CPU</h3>");
            WriteLine();
            Write("            <p>");
            WriteLine();

            foreach (var cpu in HardwareInfo.CpuList)
            {
                WriteLine();
                WriteLine();
                Write("            <span class=\"name\">Caption: </span><span class=\"value\">");
                Write((cpu.Caption).ToString()); Write("</span>");
                WriteLine();
                Write("            <span class=\"name\">CurrentClockSpeed: </span><span class=\"value\">");
                Write((cpu.CurrentClockSpeed.ToString()).ToString()); Write("</span>");
                WriteLine();
                Write("            <span class=\"name\">Description: </span><span class=\"value\">");
                Write((cpu.Description).ToString()); Write("</span>");
                WriteLine();
                Write("            <span class=\"name\">L1InstructionCacheSize: </span><span class=\"value\">");
                Write((cpu.L1InstructionCacheSize.ToString()).ToString()); Write("</span>");
                WriteLine();
                Write("            <span class=\"name\">L1DataCacheSize: </span><span class=\"value\">");
                Write((cpu.L1DataCacheSize.ToString()).ToString()); Write("</span>");
                WriteLine();
                Write("            <span class=\"name\">L2CacheSize: </span><span class=\"value\">");
                Write((cpu.L2CacheSize.ToString()).ToString()); Write("</span>");
                WriteLine();
                Write("            <span class=\"name\">L3CacheSize: </span><span class=\"value\">");
                Write((cpu.L3CacheSize.ToString()).ToString()); Write("</span>");
                WriteLine();
                Write("            <span class=\"name\">Manufacturer: </span><span class=\"value\">");
                Write((cpu.Manufacturer).ToString()); Write("</span>");
                WriteLine();
                Write("            <span class=\"name\">MaxClockSpeed: </span><span class=\"value\">");
                Write((cpu.MaxClockSpeed.ToString()).ToString()); Write("</span>");
                WriteLine();
                Write("            <span class=\"name\">Name: </span><span class=\"value\">");
                Write((cpu.Name).ToString()); Write("</span>");
                WriteLine();
                Write("            <span class=\"name\">NumberOfCores: </span><span class=\"value\">");
                Write((cpu.NumberOfCores).ToString()); Write("</span>");
                WriteLine();
                Write("            <span class=\"name\">NumberOfLogicalProcessors: </span><span class=\"value\">");
                Write((cpu.NumberOfLogicalProcessors.ToString()).ToString()); Write("</span>");
                WriteLine();
                Write("            <span class=\"name\">PercentProcessorTime: </span><span class=\"value\">");
                Write((cpu.PercentProcessorTime.ToString()).ToString()); Write("</span>");
                WriteLine();
                Write("            <span class=\"name\">ProcessorId: </span><span class=\"value\">");
                Write((cpu.ProcessorId).ToString()); Write("</span>");
                WriteLine();
                Write("            <span class=\"name\">SecondLevelAddressTranslationExtensions: </span><span class=\"value\">");
                Write((
                    cpu.SecondLevelAddressTranslationExtensions.ToString()).ToString()); Write("</span>");
                WriteLine();
                Write("            <span class=\"name\">SocketDesignation: </span><span class=\"value\">");
                Write((cpu.SocketDesignation).ToString()); Write("</span>");
                WriteLine();
                Write("            <span class=\"name\">VirtualizationFirmwareEnabled: </span><span class=\"value\">");
                Write((cpu.VirtualizationFirmwareEnabled.ToString()).ToString()); Write("</span>");
                WriteLine();
                Write("            <span class=\"name\">VMMonitorModeExtensions: </span><span class=\"value\">");
                Write((cpu.VMMonitorModeExtensions.ToString()).ToString()); Write("</span>");
                WriteLine();
                Write("<br />");
                WriteLine();
                WriteLine();
                Write("                ");

            }
            WriteLine();
            Write("            </p>");
            WriteLine();
            Write("        </li>");
            WriteLine();
            WriteLine();
            Write("        <li>");
            WriteLine();
            Write("            <input type=\"checkbox\" checked />");
            WriteLine();
            Write("            <i></i>");
            WriteLine();
            Write("            <h3>Disk</h3>");
            WriteLine();
            Write("<pre>");
            Write((DiskInfo).ToString()); Write("</pre>");
            WriteLine();
            Write("        </li>");
            WriteLine();
            WriteLine();
            Write("        <li>");
            WriteLine();
            Write("            <input type=\"checkbox\" checked />");
            WriteLine();
            Write("            <i></i>");
            WriteLine();
            Write("            <h3>Network</h3>");
            WriteLine();
            WriteLine();

            foreach (var net in HardwareInfo.NetworkAdapterList)
            {
                WriteLine();
                Write("<pre>");
                Write((net.ToString()).ToString()); Write("</pre>");
                WriteLine();

            }
            WriteLine();
            WriteLine();
            Write("        </li>");
            WriteLine();
            WriteLine();
            Write("        <li>");
            WriteLine();
            Write("            <input type=\"checkbox\" checked />");
            WriteLine();
            Write("            <i></i>");
            WriteLine();
            Write("            <h3>Last logs</h3>");
            WriteLine();
            Write("<pre>");
            Write((Logs).ToString()); Write("</pre>");
            WriteLine();
            Write("        </li>");
            WriteLine();
            WriteLine();
            Write("    </ul>");
            WriteLine();
            Write("</body>");
            WriteLine();
            Write("</html>");
            WriteLine();


            return GenerationEnvironment.ToString();
        }
    }
}
